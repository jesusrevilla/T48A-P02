# -*- coding: utf-8 -*-
"""EjerciciosNumpy_177603.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ztUlkcI5NvrKn0ui49e1XvwO6X3C8k-8
"""

# -*- coding: utf-8 -*-
"""Ejercicios de numpy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u0A5L8EVWINhE-0G5AkgUdqdLWstQV1r

# Instrucciones

## Sigue las instrucciones para cada celda y al final baja la libreta en formato .py y subelo al repositorio que se te indique, no modifiques el nombre la de función, solo importa una vez numpy en el código.
"""

import numpy as np

"""### NumPy Arrays

1. Create a NumPy array of 10 random integers between 0 and 100.
"""

def rand_int():
  '''Crea un arreglo de numpy con 10 enteros aleatorios entre 0 y 100.
  Para poder mantener la generación de números aleatorios
  fija, en los ejemplos, se utiliza un seed.

  Returns
  -------
  numpy.ndarray
    Arreglo de numpy con 10 enteros aleatorios entre 0 y 100.

  Examples
  --------
  >>> np.random.seed(10)
  >>> rand_int()
  array([ 9, 15, 64, 28, 89, 93, 29,  8, 73,  0])
  '''
  return np.random.randint(0, 100, 10)

"""2. Create a NumPy array of 5 random floating-point numbers between 0 and 1."""

def rand_float():
  '''Regresa un arreglo de numpy con 5 números punto flotante entre 0 y 1.
  Para poder mantener la generación de números aleatorios
  fija, en los ejemplos, se utiliza un seed.

  Returns
  -------
  numpy.ndarray
    Arreglo de numpy con 5 números punto flotante entre 0 y 1.

  Examples
  --------
  >>> np.random.seed(10)
  >>> rand_float()
  array([0.77132064, 0.02075195, 0.63364823, 0.74880388, 0.49850701])
  '''
  return np.random.random(5)

"""3. Create a NumPy array of the first 10 prime numbers."""

def first_10_primes():
  '''Crea un arreglo de numpy con los diez primeros números primos,
  generados mediante ciclos y condicionales que prueban si un número es primo.

  Returns
  -------
  numpy.ndarray
    Arreglo de numpy con los diez primeros números primos.

  Examples
  --------
  >>> first_10_primes()
  array([ 2,  3,  5,  7, 11, 13, 17, 19, 23, 29])
  '''
  primos = []
  n = 2
  while len(primos) < 10:
      for i in range(int(np.sqrt(n)) + 1):
          if n % i == 0:
              break
          else:
              primos.append(n)
          n += 1
  return np.array(primos)
first_10_primes()

"""4. Create a NumPy array of the squares of the numbers from 1 to 10."""

def squares():
  '''Regresa un arreglo de numpy con los cuadrados de los números del 1 al 10.
  '''
  cuadrados = []
  n = 2
  while len(cuadrados) < 10:
      for i in range(1, 11):
          i = i**2
          cuadrados.append(i)
  return np.array(cuadrados)
squares()

"""5. Create a NumPy array of the cubes of the numbers from 1 to 10."""

def cubes():
    cubos = []
    n = 2
    while len(cubos) < 10:
        for i in range(1, 11):
            i = i**3
            cubos.append(i)
    return np.array(cubos)
cubes()