# -*- coding: utf-8 -*-
"""Ejercicios de numpy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u0A5L8EVWINhE-0G5AkgUdqdLWstQV1r

# Instrucciones

## Sigue las instrucciones para cada celda y al final baja la libreta en formato .py y subelo al repositorio que se te indique, no modifiques el nombre la de función, solo importa una vez numpy en el código.
"""

import numpy as np

# ============================================================
# NumPy Arrays
# ============================================================

"""1. Create a NumPy array of 10 random integers between 0 and 100."""
def rand_int():
    """
    Crea un arreglo de numpy con 10 enteros aleatorios entre 0 y 100.
    Para poder mantener la generación de números aleatorios fija, se utiliza un seed.
    """
    return np.random.randint(0, 101, 10)


"""2. Create a NumPy array of 5 random floating-point numbers between 0 and 1."""
def rand_float():
    """
    Regresa un arreglo de numpy con 5 números punto flotante entre 0 y 1.
    Para mantener consistencia en los ejemplos, se utiliza un seed.
    """
    return np.random.rand(5)


"""3. Create a NumPy array of the first 10 prime numbers."""
def first_10_primes():
    """
    Crea un arreglo de numpy con los diez primeros números primos.
    """
    primos = []
    num = 2
    while len(primos) < 10:
        es_primo = True
        for p in primos:
            if num % p == 0:
                es_primo = False
                break
            if p * p > num:
                break
        if es_primo:
            primos.append(num)
        num += 1
    return np.array(primos)


"""4. Create a NumPy array of the squares of the numbers from 1 to 10."""
def squares():
    """Regresa un arreglo con los cuadrados de 1 a 10."""
    return np.array([i**2 for i in range(1, 11)])


"""5. Create a NumPy array of the cubes of the numbers from 1 to 10."""
def cubes():
    """Regresa un arreglo con los cubos de 1 a 10."""
    return np.array([i**3 for i in range(1, 11)])


# ============================================================
# NumPy Array Operations
# ============================================================

"""1. Add two NumPy arrays together."""
def add_arrays(arr1, arr2):
    """Suma dos arreglos numpy del mismo tamaño."""
    assert arr1.shape == arr2.shape
    return arr1 + arr2


"""2. Subtract two NumPy arrays from each other, second argument less first."""
def subtract_arrays(arr1, arr2):
    """Resta dos arreglos numpy del mismo tamaño."""
    assert arr1.shape == arr2.shape
    return arr1 - arr2


"""3. Multiply two NumPy arrays together (element-wise)."""
def multiply_arrays(arr1, arr2):
    """Multiplica dos arreglos numpy elemento a elemento."""
    assert arr1.shape == arr2.shape
    return arr1 * arr2


"""4. Divide two NumPy arrays by each other (element-wise)."""
def divide_arrays(arr1, arr2):
    """Divide dos arreglos numpy elemento a elemento."""
    assert arr1.shape == arr2.shape
    assert np.all(arr2 != 0)
    return arr1 / arr2


"""5. Create a NumPy array of the integer numbers from 1 to 5. 
Calculate the mean, median, and standard deviation."""
def stats(arr):
    """
    Calcula media, mediana y desviación estándar de un arreglo de tamaño 5.
    """
    assert arr.size == 5
    mean = np.mean(arr)
    median = np.median(arr)
    std_dev = np.std(arr)
    return (mean, median, std_dev)


# ============================================================
# NumPy Array Indexing and Slicing
# ============================================================

"""1. Select the first 5 elements of an array of size 10."""
def first_5(arr):
    assert arr.size == 10
    return arr[:5]


"""2. Select the last 3 elements of an array of size 10."""
def last_3(arr):
    assert arr.size == 10
    return arr[-3:]


"""3. Select elements at indices 2, 4, and 6."""
def indices_2_4_6(arr):
    assert arr.size == 10
    return arr[[2, 4, 6]]


"""4. Select elements greater than 50."""
def greater_50(arr):
    assert arr.size == 10
    return arr[arr > 50]


"""5. Select elements less than or equal to 7."""
def less_7(arr):
    assert arr.size == 10
    return arr[arr <= 7]


# ============================================================
# NumPy Array Reshaping
# ============================================================

def reshape_2x6(arr):
    assert arr.size == 12
    return arr.reshape(2, 6)

def reshape_2x3x4(arr):
    assert arr.size == 24
    return arr.reshape(2, 3, 4)

def reshape_10x10(arr):
    assert arr.size == 100
    return arr.reshape(10, 10)

def reshape_10x10x10(arr):
    assert arr.size == 1000
    return arr.reshape(10, 10, 10)

def reshape_10x10x10x10(arr):
    assert arr.size == 10000
    return arr.reshape(10, 10, 10, 10)


# ============================================================
# NumPy Array Broadcasting
# ============================================================

def add_broadcast(arr1, arr2):
    return arr1 + arr2

def subtract_broadcast(arr1, arr2):
    return arr1 - arr2.T

def multiply_broadcast(arr1, arr2):
    return np.dot(arr1, arr2)

def divide_broadcast(arr1, arr2):
    return arr1 / arr2

def element_wise_product(arr1, arr2):
    return arr1 * arr2


# ============================================================
# Boolean Arrays and Masks
# ============================================================

def temp_data(temps):
    """
    Imprime temperaturas mayores a 25 y número de días con temperatura < 15.
    """
    high_temps = temps[temps > 25]
    print(f"Temperaturas mayores a 25 grados: {high_temps}")
    low_temps_count = np.sum(temps < 15)
    print(f"Número de días con temperatura menor a 15 grados: {low_temps_count}")
    return high_temps, int(low_temps_count)


def rainfall_data(rainfall):
    """
    Imprime los índices lineales de posiciones con >100 mm de lluvia.
    """
    indices = np.where(rainfall > 100)
    indices_lineales = np.ravel_multi_index(indices, rainfall.shape)
    formateado = "[" + " ".join(str(int(x)) for x in indices_lineales) + "]"
    print("Índices de las ciudades con más de 100 mm de lluvia:", formateado)
    return indices_lineales


def image_thresholding(image, threshold=128):
    """
    Convierte una imagen en blanco/negro según umbral.
    """
    binary_image = np.where(image >= threshold, 255, 0)
    return binary_image


# ============================================================
# Fancy Indexing
# ============================================================

def matrix_diagonals(matrix):
    """
    Extrae diagonal principal y antidiagonal de una matriz 5x5.
    """
    assert matrix.shape == (5, 5), 'La matriz debe ser de 5x5'
    main_diagonal = matrix[np.arange(5), np.arange(5)]
    invert_diagonal = matrix[np.arange(5), np.arange(4, -1, -1)]
    return main_diagonal, invert_diagonal
