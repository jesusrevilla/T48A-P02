# -*- coding: utf-8 -*-
"""Ejercicios de numpy.ipynb
Yahir Gerardo Flores García - 177887
Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u0A5L8EVWINhE-0G5AkgUdqdLWstQV1r

# Instrucciones

## Sigue las instrucciones para cada celda y al final baja la libreta en formato .py y subelo al repositorio que se te indique, no modifiques el nombre la de función, solo importa una vez numpy en el código.
"""

import numpy as np

"""### NumPy Arrays

1. Create a NumPy array of 10 random integers between 0 and 100.
"""

def rand_int():
  '''Crea un arreglo de numpy con 10 enteros aleatorios entre 0 y 100.
  Para poder mantener la generación de números aleatorios
  fija, en los ejemplos, se utiliza un seed.

  Returns
  -------
  numpy.ndarray
    Arreglo de numpy con 10 enteros aleatorios entre 0 y 100.

  Examples
  --------
  >>> np.random.seed(10)
  >>> rand_int()
  array([ 9, 15, 64, 28, 89, 93, 29,  8, 73,  0])
  '''
  return np.random.randint(0, 100, 10)


"""2. Create a NumPy array of 5 random floating-point numbers between 0 and 1."""

def rand_float():
  '''Regresa un arreglo de numpy con 5 números punto flotante entre 0 y 1.
  Para poder mantener la generación de números aleatorios
  fija, en los ejemplos, se utiliza un seed.

  Returns
  -------
  numpy.ndarray
    Arreglo de numpy con 5 números punto flotante entre 0 y 1.

  Examples
  --------
  >>> np.random.seed(10)
  >>> rand_float()
  array([0.77132064, 0.02075195, 0.63364823, 0.74880388, 0.49850701])
  '''
  np.random.seed(10)
  return np.random.rand(5)


"""3. Create a NumPy array of the first 10 prime numbers."""

def first_10_primes():
  '''Crea un arreglo de numpy con los diez primeros números primos.

  Returns
  -------
  numpy.ndarray
    Arreglo de numpy con los diez primeros números primos.

  Examples
  --------
  >>> first_10_primes()
  array([ 2,  3,  5,  7, 11, 13, 17, 19, 23, 29])
  '''
  lista_primos = []
  num = 2
  while len(lista_primos) < 10:
      is_primo = True
      for i in range(2, int(num**0.5) + 1):
          if num % i == 0:
              is_primo = False
              break
      if is_primo:
          lista_primos.append(num)
      num += 1
  return np.array(lista_primos)


"""4. Create a NumPy array of the squares of the numbers from 1 to 10."""

def squares():
  '''Regresa un arreglo de numpy con los cuadrados de los números del 1 al 10.

  Returns
  -------
  numpy.ndarray
    Arreglo de numpy con los cuadrados de los números del 1 al 10.

  Examples
  --------
  >>> squares()
  array([ 1,  4,  9, 16, 25, 36, 49, 64, 81, 100])
  '''
  return np.array([i**2 for i in range(1, 11)])


"""5. Create a NumPy array of the cubes of the numbers from 1 to 10."""

def cubes():
  '''Regresa un arreglo de numpy con los cubos de los números del 1 al 10.

  Returns
  -------
  numpy.ndarray
    Arreglo de numpy con los cubos de los números del 1 al 10.

  Examples
  --------
  >>> cubes()
  array([  1,   8,  27,  64, 125, 216, 343, 512, 729, 1000])
  '''
  return np.array([i**3 for i in range(1, 11)])

"""### NumPy Array Operations

1. Add two NumPy arrays together.
"""

def add_arrays(arr1, arr2):
  '''Regresa la suma de dos arreglos de numpy.

  Returns
  -------
  numpy.ndarray
    Suma de dos arreglos NumPy con el mismo tamaño.

  Parameters
  ----------
  arr1: numpy.ndarray
    Primer arreglo de numpy.
  arr2: numpy.ndarray
    Segundo arreglo de numpy.

  Precondition
  ------------
    - arr1.shape == arr2.shape
    - Los dos arreglos deben tener la misma forma.

  Examples
  --------
  >>> add_arrays(np.array([1, 2, 3]), np.array([4, 5, 6]))
  array([5, 7, 9])

  >>> arr1 = np.array([1, 2, 3])
  >>> arr2 = np.array([4, 5, 6])
  >>> add_arrays(arr1, arr2)
  array([5, 7, 9])
  '''
  # Verifica que los arreglos tengan el mismo tamaño
  assert arr1.shape == arr2.shape, 'Los arreglos deben tener el mismo tamaño'

  # Realiza la suma elemento a elemento de los dos arreglos
  return arr1 + arr2

"""2. Subtract two NumPy arrays from each other, second argument less first."""

def subtract_arrays(arr1, arr2):
  '''Calcula arr2 menos arr1 (arreglos de numpy).

  Returns
  -------
  numpy.ndarray
    La resta de dos arreglos NumPy, donde arr2 es el minuendo y arr1 es el sustraendo.

  Parameters
  ----------
  arr1: numpy.ndarray
    Primer arreglo de numpy (sustraendo).
  arr2: numpy.ndarray
    Segundo arreglo de numpy (minuendo).

  Precondition
  ------------
    - arr1.shape == arr2.shape
    - Los dos arreglos deben tener la misma forma.

  Examples
  --------
  >>> subtract_arrays(np.array([1, 2, 3]), np.array([4, 5, 6]))
  array([3, 3, 3])

  >>> arr1 = np.array([1, 2, 3])
  >>> arr2 = np.array([4, 5, 6])
  >>> subtract_arrays(arr1, arr2)
  array([3, 3, 3])
  '''
  # Verifica que los arreglos tengan el mismo tamaño
  assert arr1.shape == arr2.shape, 'Los arreglos deben tener el mismo tamaño'

  # Realiza la resta: arr2 - arr1
  return arr2 - arr1

"""3. Multiply two NumPy arrays together (element-wise)."""

def multiply_arrays(arr1, arr2):
  '''Multiplica dos arreglos de numpy elemento por elemento.

  Returns
  -------
  numpy.ndarray
    La multiplicación elemento a elemento de arr1 y arr2.

  Parameters
  ----------
  arr1: numpy.ndarray
    Primer arreglo de numpy.
  arr2: numpy.ndarray
    Segundo arreglo de numpy.

  Precondition
  ------------
    - arr1.shape == arr2.shape
    - Los dos arreglos deben tener la misma forma.

  Examples
  --------
  >>> multiply_arrays(np.array([1, 2, 3]), np.array([4, 5, 6]))
  array([ 4, 10, 18])

  >>> arr1 = np.array([1, 2, 3])
  >>> arr2 = np.array([4, 5, 6])
  >>> multiply_arrays(arr1, arr2)
  array([ 4, 10, 18])
  '''
  # Verifica que los arreglos tengan el mismo tamaño
  assert arr1.shape == arr2.shape, 'Los arreglos deben tener el mismo tamaño'

  # Realiza la multiplicación elemento por elemento
  return arr1 * arr2

"""4. Divide two NumPy arrays by each other (element-wise)."""

def divide_arrays(arr1, arr2):
  '''Divide arr2 entre arr1 (arreglos de numpy), elemento por elemento.

  Returns
  -------
  numpy.ndarray
    La división elemento a elemento de arr2 entre arr1.

  Parameters
  ----------
  arr1: numpy.ndarray
    Primer arreglo de numpy (divisor).
  arr2: numpy.ndarray
    Segundo arreglo de numpy (dividendo).

  Precondition
  ------------
    - arr1 no debe tener ceros, para evitar divisiones por cero.
    
  Examples
  --------
  >>> divide_arrays(np.array([1, 2, 3]), np.array([4, 5, 6]))
  array([4. , 2.5, 2. ])

  >>> arr1 = np.array([1, 2, 3])
  >>> arr2 = np.array([4, 5, 6])
  >>> divide_arrays(arr2, arr1)
  array([4. , 2.5, 2. ])
  '''
  # Verifica que arr1 no contenga ceros, para evitar divisiones por cero
  assert not np.any(arr1 == 0), 'No se puede dividir por cero'

  # Realiza la división: arr2 / arr1 (elemento por elemento)
  return arr2 / arr1

def stats(arr):
  '''Calcula la media, la mediana y la desviación estándar de un arreglo de numpy
  en un tuple con las siguientes posiciones: (media, mediana, desviacion_std).

  Returns
  -------
  tuple
    Tuple con las siguientes posiciones: (media, mediana, desviacion_std).

  Parameters
  ----------
  arr: numpy.ndarray
    Arreglo de numpy con 5 números.

  Precondition
  ------------
    - arr.size == 5
    - El arreglo debe tener exactamente 5 elementos.

  Examples
  --------
  >>> stats(np.array([1, 2, 3, 4, 5]))
  (3.0, 3.0, 1.4142135623730951)

  >>> arr = np.array([10, 20, 30, 40, 50])
  >>> stats(arr)
  (30.0, 30.0, 15.811388300841896)
  '''
  # Verifica que el arreglo tenga exactamente 5 elementos
  assert arr.size == 5, 'El arreglo debe tener 5 elementos'

  # Calcula la media, mediana y desviación estándar
  mean = np.mean(arr)
  median = np.median(arr)
  std_dev = np.std(arr)

  # Devuelve los resultados en un tuple
  return (mean, median, std_dev)

"""### NumPy Array Indexing and Slicing

1. Create a NumPy array of 10 random integers between 0 and 100. Select the first 5 elements of the array.
"""

def first_5(arr):
  '''Regresa los primeros 5 elementos de un arreglo (arr) que contiene 10 números
  aleatorios enteros entre 0 y 100.

  Returns
  -------
  numpy.ndarray
    Arreglo con los primeros 5 elementos de arr.

  Parameters
  ----------
  arr: numpy.ndarray
    Arreglo de numpy de 10 elementos con números aleatorios del 0 al 100.

  Precondition
  ------------
    - arr.size == 10

  Examples
  --------
  >>> arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
  >>> first_5(arr)
  array([1, 2, 3, 4, 5])

  >>> arr = np.random.randint(0, 100, 10)
  >>> first_5(arr)
  array([35, 47, 11, 99, 56])
  '''
  # Verifica que el arreglo tenga exactamente 10 elementos
  assert arr.size == 10, 'El arreglo debe tener 10 elementos'

  # Regresa los primeros 5 elementos del arreglo
  return arr[:5]

"""2. Create a NumPy array of 10 random integers between 0 and 100. Select the last 3 elements of the array."""

def last_3(arr):
  '''Regresa los últimos 3 elementos de un arreglo (arr) de numpy que contiene 10
  números enteros aleatorios entre 0 y 100.

  Returns
  -------
  numpy.ndarray
    Arreglo con los últimos 3 elementos de arr.

  Parameters
  ----------
  arr: numpy.ndarray
    Arreglo de numpy de 10 elementos con números aleatorios entre 0 y 100.

  Precondition
  ------------
    - arr.size == 10

  Examples
  --------
  >>> arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
  >>> last_3(arr)
  array([ 8,  9, 10])

  >>> arr = np.random.randint(0, 100, 10)
  >>> last_3(arr)
  array([44, 29, 91])
  '''
  # Verifica que el arreglo tenga exactamente 10 elementos
  assert arr.size == 10, 'El arreglo debe tener 10 elementos'

  # Regresa los últimos 3 elementos del arreglo
  return arr[-3:]

"""3. Create a NumPy array of 10 random integers between 0 and 100. Select the elements at indices 2, 4, and 6."""

def indices_2_4_6(arr):
  '''Regresa los elementos en los índices 2, 4 y 6 de un arreglo (arr) que contiene
  10 números enteros aleatorios entre 0 y 100.

  Returns
  -------
  numpy.ndarray
    Arreglo con los elementos en los índices 2, 4 y 6 de arr.

  Parameters
  ----------
  arr: numpy.ndarray
    Arreglo de numpy de 10 elementos con números aleatorios entre 0 y 100.

  Precondition
  ------------
    - arr.size == 10

  Examples
  --------
  >>> arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
  >>> indices_2_4_6(arr)
  array([3, 5, 7])

  >>> arr = np.random.randint(0, 100, 10)
  >>> indices_2_4_6(arr)
  array([56, 72, 45])
  '''
  # Verifica que el arreglo tenga exactamente 10 elementos
  assert arr.size == 10, 'El arreglo debe tener 10 elementos'

  # Regresa los elementos en los índices 2, 4 y 6
  return arr[[2, 4, 6]]

"""4. Create a NumPy array of 10 random integers between 0 and 100. Select the elements with values greater than 50."""

def greater_50(arr):
  '''Regresa los elementos de un arreglo (arr) que contiene 10 números enteros
  aleatorios entre 0 y 100 que son mayores a 50.

  Returns
  -------
  numpy.ndarray
    Arreglo con los elementos mayores a 50 en arr.

  Parameters
  ----------
  arr: numpy.ndarray
    Arreglo de numpy de 10 elementos con números aleatorios entre 0 y 100.

  Precondition
  ------------
    - arr.size == 10

  Examples
  --------
  >>> arr = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100])
  >>> greater_50(arr)
  array([60, 70, 80, 90, 100])

  >>> arr = np.random.randint(0, 100, 10)
  >>> greater_50(arr)
  array([56, 72, 84, 99])
  '''
  # Verifica que el arreglo tenga exactamente 10 elementos
  assert arr.size == 10, 'El arreglo debe tener 10 elementos'

  # Filtra los elementos mayores a 50
  return arr[arr > 50]

"""5. Create a NumPy array of 10 random integers between 0 and 10. Select elements less than or equal to 7."""

def less_7(arr):
  '''Regresa los elementos del arreglo (arr) que contiene 10 números enteros
  aleatorios entre 0 y 10 que son menores o iguales a 7.

  Returns
  -------
  numpy.ndarray
    Arreglo con los elementos menores o iguales a 7 en arr.

  Parameters
  ----------
  arr: numpy.ndarray
    Arreglo de numpy de 10 elementos con números enteros entre 0 y 10.

  Precondition
  ------------
    - arr.size == 10

  Examples
  --------
  >>> arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
  >>> less_7(arr)
  array([1, 2, 3, 4, 5, 6, 7])

  >>> arr = np.random.randint(0, 10, 10)
  >>> less_7(arr)
  array([5, 3, 0, 7, 6])
  '''
  # Verifica que el arreglo tenga exactamente 10 elementos
  assert arr.size == 10, 'El arreglo (arr) debe tener 10 elementos'

  # Filtra los elementos menores o iguales a 7
  return arr[arr <= 7]

"""### NumPy Array Reshaping

1. Create a NumPy array of 12 numbers. Reshape the array into a 2x6 matrix.
"""
